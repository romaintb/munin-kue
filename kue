#!/usr/bin/perl

# Copyright (c) 2014 Romain Bertrand <romain@doxin.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

#%# family=auto

use strict;
use warnings;
use Munin::Plugin;

use JSON qw( decode_json );
require LWP::UserAgent;


my $HOST = exists $ENV{'host'} ? $ENV{'host'} : '127.0.0.1';
my $PORT = exists $ENV{'port'} ? $ENV{'port'} : 3000;


# config of the graph
if ( exists $ARGV[0] and $ARGV[0] eq "config" ) {
    print "graph_title Kue status\n";
    print "graph_category kue\n";

    print "inactive.label Inactive\n";
    print "inactive.info Inactive\n";
    print "inactive.draw LINE2\n";

    print "complete.label Complete\n";
    print "complete.info Complete\n";
    print "complete.draw LINE2\n";

    print "active.label Active\n";
    print "active.info Active\n";
    print "active.draw LINE2\n";

    print "failed.label Failed\n";
    print "failed.info Failed\n";
    print "failed.draw LINE2\n";

    print "delayed.label Delayed\n";
    print "delayed.info Delayed\n";
    print "delayed.draw LINE2\n";

    print "worktime.label Worktime\n";
    print "worktime.info Worktime\n";
    print "worktime.draw LINE2\n";
    print "worktime.type COUNTER\n";

    exit 0;
}


my $uastr = sprintf("munin/%s (libwww-perl/%s)", $Munin::Common::Defaults::MUNIN_VERSION, $LWP::VERSION);
my $ua = LWP::UserAgent->new(timeout => 30, agent => $uastr);

# try to connect and parse json
my $jres;
my $url = "http://$HOST:$PORT/stats";
my $res = $ua->request(HTTP::Request->new('GET', $url));
print "no (can't talk to api on $url)\n" && exit 0 unless $res->is_success;
eval { $jres = decode_json($res->content); };
print "no (response is not json parseable)" && exit 0 if $@;

print   "inactive.value " . $jres->{'inactiveCount'};
print "\ncomplete.value " . $jres->{'completeCount'};
print "\nactive.value "   . $jres->{'activeCount'};
print "\nfailed.value "   . $jres->{'failedCount'};
print "\ndelayed.value "  . $jres->{'delayedCount'};
print "\nworktime.value " . ($jres->{'workTime'} || 0);
print "\n";

# vim:syntax=perl
